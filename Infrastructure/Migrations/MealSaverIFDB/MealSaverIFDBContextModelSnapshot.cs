// <auto-generated />
using System;
using Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations.MealSaverIFDB
{
    [DbContext(typeof(MealSaverIFDBContext))]
    partial class MealSaverIFDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bd235c47-9a2f-4ec0-a952-0a1948a643b4",
                            Name = "CanteenEmployee",
                            NormalizedName = "CANTEENEMPLOYEE"
                        },
                        new
                        {
                            Id = "9cc33e13-6c36-436b-b785-c3e89aaa59cb",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "906e0a92-970d-47d6-8bc5-34d3f8dfbea3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db9b7cb9-79b4-43a2-8914-31ed99976d6d",
                            Email = "alice.johnson@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.JOHNSON@MAIL.COM",
                            NormalizedUserName = "ALICE",
                            PasswordHash = "AQAAAAIAAYagAAAAEN38QN+2JIHf6gFPguKUAYK9+tVDww8qMIweSiDRLr5w26taLFZgqBaESYF9+vaK4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30c61126-f338-4db9-a3f2-0955da0cab58",
                            TwoFactorEnabled = false,
                            UserName = "Alice"
                        },
                        new
                        {
                            Id = "c9d88b8e-2f7a-4ded-89ba-1004721be682",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8e35286-94ac-4d13-b454-29bad4d6ff6a",
                            Email = "bob.smith@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.SMITH@MAIL.COM",
                            NormalizedUserName = "BOB",
                            PasswordHash = "AQAAAAIAAYagAAAAEFy0eCprZsShgNz2K9pUB0vj8NUGSzagAFIfJ30Xu4g5hl3u/WOIGxLXlN6r5cRrmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f5bf510-f245-4098-a413-c370fbe6ad89",
                            TwoFactorEnabled = false,
                            UserName = "Bob"
                        },
                        new
                        {
                            Id = "5230f2b1-933d-4a02-a590-bbea9c7b3903",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e67bbd9d-2358-4a05-875e-5ececd034f40",
                            Email = "john.doe@student.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@STUDENT.COM",
                            NormalizedUserName = "JOHN DOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDwnICtuUK65YWKtvTvqo+HRN6TAc3hsoXORUC7MfF1FiglIBltODt8zb/vREG3JiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8e75dd7-0c77-4e4e-9fcc-7d708b8bc4ef",
                            TwoFactorEnabled = false,
                            UserName = "John Doe"
                        },
                        new
                        {
                            Id = "9a18f83d-1894-447a-8b06-2258c01b30b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "293c8156-3569-4b1b-8b53-6b2a2da45cb3",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEKCB0cPePYlzvDsdVrpe7X6LgetWzcNwTcGAv3n6CdVlAT/eJdZW2PFZj7boWhaiDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7ce4d33-48d9-4211-9f1e-3664ebdc6478",
                            TwoFactorEnabled = false,
                            UserName = "Jane Smith"
                        },
                        new
                        {
                            Id = "99717a7d-fedc-4db5-8707-8c67fda1b708",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7180d0b6-3489-483a-838c-b5b85b9ef062",
                            Email = "michael.johnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAEL.JOHNSON@EXAMPLE.COM",
                            NormalizedUserName = "MICHAEL JOHNSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEGdqLrnRFrJ34umWzt1f5epCIsn4EnTfDk55wlYyl4BZ529O+oasDgv6xLnN6ED5gg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7dc6fc8-4f4d-452c-9c4f-8072fdb47f5e",
                            TwoFactorEnabled = false,
                            UserName = "Michael Johnson"
                        },
                        new
                        {
                            Id = "9e01849c-f116-4999-b36d-ae7b5965622d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f12ef69-f873-482f-a0db-3a2b3499ef8b",
                            Email = "emily.davis@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.DAVIS@EXAMPLE.COM",
                            NormalizedUserName = "EMILY DAVIS",
                            PasswordHash = "AQAAAAIAAYagAAAAEL1vt99y0mR+tDp+DRRi3UEZ3NSI+MB6yNqsT7p9hp4y9JxtjUi7SOYiNsAk6SMaig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81bd8d44-cc62-41f4-9e95-b8a22c0bb285",
                            TwoFactorEnabled = false,
                            UserName = "Emily Davis"
                        },
                        new
                        {
                            Id = "3524ebb6-e080-41c4-950f-aecb500bb14d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "165fcf03-46d9-41c1-ae65-6c23e9851060",
                            Email = "william.brown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WILLIAM.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "WILLIAM BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFzMUfV9gc6UTVvVhaNkU7ihdBVU1F4LuMqG8HJEiY2ZMYedeKY/tbet0JzJHO70SQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e15058f-f4a0-4157-a332-833acad1270c",
                            TwoFactorEnabled = false,
                            UserName = "William Brown"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "906e0a92-970d-47d6-8bc5-34d3f8dfbea3",
                            RoleId = "bd235c47-9a2f-4ec0-a952-0a1948a643b4"
                        },
                        new
                        {
                            UserId = "c9d88b8e-2f7a-4ded-89ba-1004721be682",
                            RoleId = "bd235c47-9a2f-4ec0-a952-0a1948a643b4"
                        },
                        new
                        {
                            UserId = "5230f2b1-933d-4a02-a590-bbea9c7b3903",
                            RoleId = "9cc33e13-6c36-436b-b785-c3e89aaa59cb"
                        },
                        new
                        {
                            UserId = "9a18f83d-1894-447a-8b06-2258c01b30b9",
                            RoleId = "9cc33e13-6c36-436b-b785-c3e89aaa59cb"
                        },
                        new
                        {
                            UserId = "99717a7d-fedc-4db5-8707-8c67fda1b708",
                            RoleId = "9cc33e13-6c36-436b-b785-c3e89aaa59cb"
                        },
                        new
                        {
                            UserId = "9e01849c-f116-4999-b36d-ae7b5965622d",
                            RoleId = "9cc33e13-6c36-436b-b785-c3e89aaa59cb"
                        },
                        new
                        {
                            UserId = "3524ebb6-e080-41c4-950f-aecb500bb14d",
                            RoleId = "9cc33e13-6c36-436b-b785-c3e89aaa59cb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
